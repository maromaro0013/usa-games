# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

GameMain = ->
  m_game_scale = 1.0
  m_field = ""

  FixViewPort = ->
    m_game_scale = window.innerHeight / CANVAS_HEIGHT
    if (window.innerWidth / CANVAS_WIDTH) < (window.innerHeight / CANVAS_HEIGHT)
      m_game_scale = window.innerWidth / CANVAS_WIDTH

  update_field_buff = (f)->
    f.buff = []
    for y in [0..f.h - 1]
      f.buff[y] = []
      for x in [0..f.w - 1]
        f.buff[y][x] = 0

    for key,panel of f.panels
      for y in [panel["y"]..panel["y"]+panel["h"] - 1]
        for x in [panel["x"]..panel["x"]+panel["w"] - 1]
          f.buff[y][x] = 1

    for key,panel of f.panels
      min_move_x = max_move_x = FIELD_OFS_X + panel.x*(ONE_WIDTH + OFS_PANEL_TO_PANEL)
      min_move_y = max_move_y = FIELD_OFS_Y + panel.y*(ONE_HEIGHT + OFS_PANEL_TO_PANEL)
      for y in [panel.y+panel.h..f.h - 1]
        ""

      if panel.x+panel.w < f.w
        for x in [panel.x+panel.w..f.w - 1]
          if f.buff[panel.y][x] == 0
            max_move_x += (ONE_WIDTH + OFS_PANEL_TO_PANEL)
          else
            break
      if panel.x > 0
        for x in [panel.x-1..0]
          if f.buff[panel.y][x] == 0
            min_move_x -= (ONE_WIDTH + OFS_PANEL_TO_PANEL)
          else
            break

      panel.image.min_move_x = min_move_x
      panel.image.min_move_y = min_move_y
      panel.image.max_move_x = max_move_x
      panel.image.max_move_y = max_move_y

  panel_drag_update = (sprite, pointer, drag_x, drag_y, snapPoint) ->
    if sprite.y > sprite.max_move_y
      sprite.y = sprite.max_move_y
    if sprite.y < sprite.min_move_y
      sprite.y = sprite.min_move_y
    if sprite.x > sprite.max_move_x
      sprite.x = sprite.max_move_x
    if sprite.x < sprite.min_move_x
      sprite.x = sprite.min_move_x

  panel_drag_stop = (sprite, pointer) ->
    min_x = 0
    min_y = 0
    for y in [0..m_field.h]
      for x in [0..m_field.w]
        tmp_x = x*(ONE_WIDTH + OFS_PANEL_TO_PANEL)
    console.log sprite.x

  create_panels_from_json = (field_json)->
    m_field = new Object
    m_field.w = field_json["framesize"]["w"]
    m_field.h = field_json["framesize"]["h"]
    m_field.end_x = field_json["endpoint"]["x"]
    m_field.end_y = field_json["endpoint"]["y"]
    m_field.panels = []

    for key,panel of field_json["panels"]
      m_field.panels.push(panel)

      x = FIELD_OFS_X + m_field.panels[key].x*(ONE_WIDTH + OFS_PANEL_TO_PANEL)
      y = FIELD_OFS_Y + m_field.panels[key].y*(ONE_HEIGHT + OFS_PANEL_TO_PANEL)

      if m_field.panels[key].w == 1 && m_field.panels[key].h == 1
        m_field.panels[key].image = game.add.sprite(x, y, "11_0")
      if m_field.panels[key].w == 2 && m_field.panels[key].h == 1
        m_field.panels[key].image = game.add.sprite(x, y, "21_0")
      if m_field.panels[key].w == 1 && m_field.panels[key].h == 2
        m_field.panels[key].image = game.add.sprite(x, y, "12_0")
      if m_field.panels[key].w == 2 && m_field.panels[key].h == 2
        m_field.panels[key].image = game.add.sprite(x, y, "22_0")

      m_field.panels[key].image.idx_x = m_field.panels[key].x
      m_field.panels[key].image.idx_y = m_field.panels[key].y
      m_field.panels[key].image.inputEnabled = true
      m_field.panels[key].image.input.enableDrag true
      m_field.panels[key].image.events.onDragUpdate.add(panel_drag_update)
      m_field.panels[key].image.events.onDragStop.add(panel_drag_stop, this);

    update_field_buff m_field

  preload = ->
    game.time.advancedTiming = true

    game.load.image('bg', '<%= image_path("games/rescue/bg.png") %>')
    game.load.image('11_0', '<%= image_path("games/rescue/panel_11_0.png") %>')
    game.load.image('11_1', '<%= image_path("games/rescue/panel_11_1.png") %>')
    game.load.image('12_0', '<%= image_path("games/rescue/panel_12_0.png") %>')
    game.load.image('12_1', '<%= image_path("games/rescue/panel_12_1.png") %>')
    game.load.image('21_0', '<%= image_path("games/rescue/panel_21_0.png") %>')
    game.load.image('21_1', '<%= image_path("games/rescue/panel_21_1.png") %>')
    game.load.image('22_0', '<%= image_path("games/rescue/panel_22_0.png") %>')

  create = ->
    game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE
    FixViewPort()
    game.scale.setUserScale(m_game_scale, m_game_scale, 0, 0)
    game.scale.updateLayout()

    game.stage.backgroundColor = BG_COLOR
    game.add.image(BG_X, BG_Y, 'bg')

    create_panels_from_json JSON.parse STAGE1_DATA

  render = ->
    yi = 32
    y = 0
    game.debug.text('fps : ' + game.time.fps, 0, y += yi)
    game.debug.text('scale : ' + m_game_scale, 0, y += yi)

  update = ->


  window['PhaserGlobal'] = []
  window['PhaserGlobal'].disableAudio = true

  game = new Phaser.Game(CANVAS_WIDTH, CANVAS_HEIGHT, Phaser.CANVAS, 'phaser-rescue', { preload, create, update, render }, false, false, null)

$(document).on('ready page:load', ->
  GameMain()
)
